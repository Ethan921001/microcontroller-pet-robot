

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 09 21:01:08 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23   000000                     
    24                           ; Generated 25/07/2024 GMT
    25                           ; 
    26                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4520 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000FE0                     bsr             equ	4064
    59   000FE9                     fsr0            equ	4073
    60   000FEA                     fsr0h           equ	4074
    61   000FE9                     fsr0l           equ	4073
    62   000FE1                     fsr1            equ	4065
    63   000FE2                     fsr1h           equ	4066
    64   000FE1                     fsr1l           equ	4065
    65   000FD9                     fsr2            equ	4057
    66   000FDA                     fsr2h           equ	4058
    67   000FD9                     fsr2l           equ	4057
    68   000FEF                     indf0           equ	4079
    69   000FE7                     indf1           equ	4071
    70   000FDF                     indf2           equ	4063
    71   000FF2                     intcon          equ	4082
    72   000000                     nvmcon          equ	0
    73   000FF9                     pcl             equ	4089
    74   000FFA                     pclath          equ	4090
    75   000FFB                     pclatu          equ	4091
    76   000FEB                     plusw0          equ	4075
    77   000FE3                     plusw1          equ	4067
    78   000FDB                     plusw2          equ	4059
    79   000FED                     postdec0        equ	4077
    80   000FE5                     postdec1        equ	4069
    81   000FDD                     postdec2        equ	4061
    82   000FEE                     postinc0        equ	4078
    83   000FE6                     postinc1        equ	4070
    84   000FDE                     postinc2        equ	4062
    85   000FEC                     preinc0         equ	4076
    86   000FE4                     preinc1         equ	4068
    87   000FDC                     preinc2         equ	4060
    88   000FF3                     prod            equ	4083
    89   000FF4                     prodh           equ	4084
    90   000FF3                     prodl           equ	4083
    91   000FD8                     status          equ	4056
    92   000FF5                     tablat          equ	4085
    93   000FF6                     tblptr          equ	4086
    94   000FF7                     tblptrh         equ	4087
    95   000FF6                     tblptrl         equ	4086
    96   000FF8                     tblptru         equ	4088
    97   000FFD                     tosl            equ	4093
    98   000FE8                     wreg            equ	4072
    99   000F80                     PORTA           equ	3968	;# 
   100   000F81                     PORTB           equ	3969	;# 
   101   000F82                     PORTC           equ	3970	;# 
   102   000F83                     PORTD           equ	3971	;# 
   103   000F84                     PORTE           equ	3972	;# 
   104   000F89                     LATA            equ	3977	;# 
   105   000F8A                     LATB            equ	3978	;# 
   106   000F8B                     LATC            equ	3979	;# 
   107   000F8C                     LATD            equ	3980	;# 
   108   000F8D                     LATE            equ	3981	;# 
   109   000F92                     TRISA           equ	3986	;# 
   110   000F92                     DDRA            equ	3986	;# 
   111   000F93                     TRISB           equ	3987	;# 
   112   000F93                     DDRB            equ	3987	;# 
   113   000F94                     TRISC           equ	3988	;# 
   114   000F94                     DDRC            equ	3988	;# 
   115   000F95                     TRISD           equ	3989	;# 
   116   000F95                     DDRD            equ	3989	;# 
   117   000F96                     TRISE           equ	3990	;# 
   118   000F96                     DDRE            equ	3990	;# 
   119   000F9B                     OSCTUNE         equ	3995	;# 
   120   000F9D                     PIE1            equ	3997	;# 
   121   000F9E                     PIR1            equ	3998	;# 
   122   000F9F                     IPR1            equ	3999	;# 
   123   000FA0                     PIE2            equ	4000	;# 
   124   000FA1                     PIR2            equ	4001	;# 
   125   000FA2                     IPR2            equ	4002	;# 
   126   000FA6                     EECON1          equ	4006	;# 
   127   000FA7                     EECON2          equ	4007	;# 
   128   000FA8                     EEDATA          equ	4008	;# 
   129   000FA9                     EEADR           equ	4009	;# 
   130   000FAB                     RCSTA           equ	4011	;# 
   131   000FAB                     RCSTA1          equ	4011	;# 
   132   000FAC                     TXSTA           equ	4012	;# 
   133   000FAC                     TXSTA1          equ	4012	;# 
   134   000FAD                     TXREG           equ	4013	;# 
   135   000FAD                     TXREG1          equ	4013	;# 
   136   000FAE                     RCREG           equ	4014	;# 
   137   000FAE                     RCREG1          equ	4014	;# 
   138   000FAF                     SPBRG           equ	4015	;# 
   139   000FAF                     SPBRG1          equ	4015	;# 
   140   000FB0                     SPBRGH          equ	4016	;# 
   141   000FB1                     T3CON           equ	4017	;# 
   142   000FB2                     TMR3            equ	4018	;# 
   143   000FB2                     TMR3L           equ	4018	;# 
   144   000FB3                     TMR3H           equ	4019	;# 
   145   000FB4                     CMCON           equ	4020	;# 
   146   000FB5                     CVRCON          equ	4021	;# 
   147   000FB6                     ECCP1AS         equ	4022	;# 
   148   000FB6                     ECCPAS          equ	4022	;# 
   149   000FB7                     PWM1CON         equ	4023	;# 
   150   000FB7                     ECCP1DEL        equ	4023	;# 
   151   000FB8                     BAUDCON         equ	4024	;# 
   152   000FB8                     BAUDCTL         equ	4024	;# 
   153   000FBA                     CCP2CON         equ	4026	;# 
   154   000FBB                     CCPR2           equ	4027	;# 
   155   000FBB                     CCPR2L          equ	4027	;# 
   156   000FBC                     CCPR2H          equ	4028	;# 
   157   000FBD                     CCP1CON         equ	4029	;# 
   158   000FBE                     CCPR1           equ	4030	;# 
   159   000FBE                     CCPR1L          equ	4030	;# 
   160   000FBF                     CCPR1H          equ	4031	;# 
   161   000FC0                     ADCON2          equ	4032	;# 
   162   000FC1                     ADCON1          equ	4033	;# 
   163   000FC2                     ADCON0          equ	4034	;# 
   164   000FC3                     ADRES           equ	4035	;# 
   165   000FC3                     ADRESL          equ	4035	;# 
   166   000FC4                     ADRESH          equ	4036	;# 
   167   000FC5                     SSPCON2         equ	4037	;# 
   168   000FC6                     SSPCON1         equ	4038	;# 
   169   000FC7                     SSPSTAT         equ	4039	;# 
   170   000FC8                     SSPADD          equ	4040	;# 
   171   000FC9                     SSPBUF          equ	4041	;# 
   172   000FCA                     T2CON           equ	4042	;# 
   173   000FCB                     PR2             equ	4043	;# 
   174   000FCB                     MEMCON          equ	4043	;# 
   175   000FCC                     TMR2            equ	4044	;# 
   176   000FCD                     T1CON           equ	4045	;# 
   177   000FCE                     TMR1            equ	4046	;# 
   178   000FCE                     TMR1L           equ	4046	;# 
   179   000FCF                     TMR1H           equ	4047	;# 
   180   000FD0                     RCON            equ	4048	;# 
   181   000FD1                     WDTCON          equ	4049	;# 
   182   000FD2                     HLVDCON         equ	4050	;# 
   183   000FD2                     LVDCON          equ	4050	;# 
   184   000FD3                     OSCCON          equ	4051	;# 
   185   000FD5                     T0CON           equ	4053	;# 
   186   000FD6                     TMR0            equ	4054	;# 
   187   000FD6                     TMR0L           equ	4054	;# 
   188   000FD7                     TMR0H           equ	4055	;# 
   189   000FD8                     STATUS          equ	4056	;# 
   190   000FD9                     FSR2            equ	4057	;# 
   191   000FD9                     FSR2L           equ	4057	;# 
   192   000FDA                     FSR2H           equ	4058	;# 
   193   000FDB                     PLUSW2          equ	4059	;# 
   194   000FDC                     PREINC2         equ	4060	;# 
   195   000FDD                     POSTDEC2        equ	4061	;# 
   196   000FDE                     POSTINC2        equ	4062	;# 
   197   000FDF                     INDF2           equ	4063	;# 
   198   000FE0                     BSR             equ	4064	;# 
   199   000FE1                     FSR1            equ	4065	;# 
   200   000FE1                     FSR1L           equ	4065	;# 
   201   000FE2                     FSR1H           equ	4066	;# 
   202   000FE3                     PLUSW1          equ	4067	;# 
   203   000FE4                     PREINC1         equ	4068	;# 
   204   000FE5                     POSTDEC1        equ	4069	;# 
   205   000FE6                     POSTINC1        equ	4070	;# 
   206   000FE7                     INDF1           equ	4071	;# 
   207   000FE8                     WREG            equ	4072	;# 
   208   000FE9                     FSR0            equ	4073	;# 
   209   000FE9                     FSR0L           equ	4073	;# 
   210   000FEA                     FSR0H           equ	4074	;# 
   211   000FEB                     PLUSW0          equ	4075	;# 
   212   000FEC                     PREINC0         equ	4076	;# 
   213   000FED                     POSTDEC0        equ	4077	;# 
   214   000FEE                     POSTINC0        equ	4078	;# 
   215   000FEF                     INDF0           equ	4079	;# 
   216   000FF0                     INTCON3         equ	4080	;# 
   217   000FF1                     INTCON2         equ	4081	;# 
   218   000FF2                     INTCON          equ	4082	;# 
   219   000FF3                     PROD            equ	4083	;# 
   220   000FF3                     PRODL           equ	4083	;# 
   221   000FF4                     PRODH           equ	4084	;# 
   222   000FF5                     TABLAT          equ	4085	;# 
   223   000FF6                     TBLPTR          equ	4086	;# 
   224   000FF6                     TBLPTRL         equ	4086	;# 
   225   000FF7                     TBLPTRH         equ	4087	;# 
   226   000FF8                     TBLPTRU         equ	4088	;# 
   227   000FF9                     PCLAT           equ	4089	;# 
   228   000FF9                     PC              equ	4089	;# 
   229   000FF9                     PCL             equ	4089	;# 
   230   000FFA                     PCLATH          equ	4090	;# 
   231   000FFB                     PCLATU          equ	4091	;# 
   232   000FFC                     STKPTR          equ	4092	;# 
   233   000FFD                     TOS             equ	4093	;# 
   234   000FFD                     TOSL            equ	4093	;# 
   235   000FFE                     TOSH            equ	4094	;# 
   236   000FFF                     TOSU            equ	4095	;# 
   237                           
   238                           	psect	idataCOMRAM
   239   0008FC                     __pidataCOMRAM:
   240                           	callstack 0
   241                           
   242                           ;initializer for _servoPulse
   243   0008FC  05DC               	dw	1500
   244   0008FE  05DC               	dw	1500
   245   000900  05DC               	dw	1500
   246   000902  05DC               	dw	1500
   247   007C08                     _RB0            set	31752
   248   000F8A                     _LATB           set	3978
   249   000F93                     _TRISB          set	3987
   250   000F8A                     _LATBbits       set	3978
   251   000FF2                     _INTCONbits     set	4082
   252   000FD6                     _TMR0L          set	4054
   253   000FD7                     _TMR0H          set	4055
   254   000FD5                     _T0CON          set	4053
   255                           
   256                           ; #config settings
   257                           
   258                           	psect	cinit
   259   0008BC                     __pcinit:
   260                           	callstack 0
   261   0008BC                     start_initialization:
   262                           	callstack 0
   263   0008BC                     __initialization:
   264                           	callstack 0
   265                           
   266                           ; Initialize objects allocated to COMRAM (8 bytes)
   267                           ; load TBLPTR registers with __pidataCOMRAM
   268   0008BC  0EFC               	movlw	low __pidataCOMRAM
   269   0008BE  6EF6               	movwf	tblptrl,c
   270   0008C0  0E08               	movlw	high __pidataCOMRAM
   271   0008C2  6EF7               	movwf	tblptrh,c
   272   0008C4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   273   0008C6  6EF8               	movwf	tblptru,c
   274   0008C8  EE00  F001         	lfsr	0,__pdataCOMRAM
   275   0008CC  EE10 F008          	lfsr	1,8
   276   0008D0                     copy_data0:
   277   0008D0  0009               	tblrd		*+
   278   0008D2  CFF5 FFEE          	movff	tablat,postinc0
   279   0008D6  50E5               	movf	postdec1,w,c
   280   0008D8  50E1               	movf	fsr1l,w,c
   281   0008DA  E1FA               	bnz	copy_data0
   282                           
   283                           ; Clear objects allocated to COMRAM (2 bytes)
   284   0008DC  6A0F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   285   0008DE  6A0E               	clrf	__pbssCOMRAM& (0+255),c
   286   0008E0                     end_of_initialization:
   287                           	callstack 0
   288   0008E0                     __end_of__initialization:
   289                           	callstack 0
   290   0008E0  9010               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   291   0008E2  9210               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   292   0008E4  0100               	movlb	0
   293   0008E6  EF19  F004         	goto	_main	;jump to C main() function
   294                           
   295                           	psect	bssCOMRAM
   296   00000E                     __pbssCOMRAM:
   297                           	callstack 0
   298   00000E                     _pwmCounter:
   299                           	callstack 0
   300   00000E                     	ds	2
   301                           
   302                           	psect	dataCOMRAM
   303   000001                     __pdataCOMRAM:
   304                           	callstack 0
   305   000001                     _servoPulse:
   306                           	callstack 0
   307   000001                     	ds	8
   308                           
   309                           	psect	cstackCOMRAM
   310   000009                     __pcstackCOMRAM:
   311                           	callstack 0
   312   000009                     setServoAngle@pulseWidth:
   313                           	callstack 0
   314   000009                     
   315                           ; 1 bytes @ 0x0
   316   000009                     	ds	2
   317   00000B                     setServoAngle@servo:
   318                           	callstack 0
   319   00000B                     
   320                           ; 1 bytes @ 0x2
   321   00000B                     	ds	1
   322   00000C                     ??_turn_right:
   323                           
   324                           ; 1 bytes @ 0x3
   325   00000C                     	ds	1
   326   00000D                     ??_main:
   327                           
   328                           ; 1 bytes @ 0x4
   329   00000D                     	ds	1
   330                           
   331 ;;
   332 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   333 ;;
   334 ;; *************** function _main *****************
   335 ;; Defined at:
   336 ;;		line 230 in file "servo.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;		None
   339 ;; Auto vars:     Size  Location     Type
   340 ;;		None
   341 ;; Return value:  Size  Location     Type
   342 ;;                  1    wreg      void 
   343 ;; Registers used:
   344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   350 ;;      Params:         0       0       0       0       0       0       0
   351 ;;      Locals:         0       0       0       0       0       0       0
   352 ;;      Temps:          1       0       0       0       0       0       0
   353 ;;      Totals:         1       0       0       0       0       0       0
   354 ;;Total ram usage:        1 bytes
   355 ;; Hardware stack levels required when called: 3
   356 ;; This function calls:
   357 ;;		_Timer0_Init
   358 ;;		_setstand
   359 ;;		_turn_right
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text0
   366   000832                     __ptext0:
   367                           	callstack 0
   368   000832                     _main:
   369                           	callstack 28
   370   000832                     
   371                           ;servo.c: 235:     TRISB = 0x01;
   372   000832  0E01               	movlw	1
   373   000834  6E93               	movwf	147,c	;volatile
   374   000836                     
   375                           ;servo.c: 236:     LATB = 0x00;
   376   000836  6A8A               	clrf	138,c	;volatile
   377   000838                     
   378                           ;servo.c: 237:     Timer0_Init();
   379   000838  EC75  F004         	call	_Timer0_Init	;wreg free
   380   00083C                     l1147:
   381                           
   382                           ;servo.c: 240:         setstand();
   383   00083C  EC41  F004         	call	_setstand	;wreg free
   384   000840                     
   385                           ;servo.c: 246:                 _delay((unsigned long)((400)*(250000/4000.0)));
   386   000840  0E21               	movlw	33
   387   000842  6E0D               	movwf	??_main^0,c
   388   000844  0E76               	movlw	118
   389   000846                     u157:
   390   000846  2EE8               	decfsz	wreg,f,c
   391   000848  D7FE               	bra	u157
   392   00084A  2E0D               	decfsz	??_main^0,f,c
   393   00084C  D7FC               	bra	u157
   394   00084E  D000               	nop2	
   395   000850                     l1151:
   396                           
   397                           ;servo.c: 248:             if((RB0 == 0b0)) break;
   398   000850  B081               	btfsc	3969,0,c	;volatile
   399   000852  EF2D  F004         	goto	u141
   400   000856  EF2F  F004         	goto	u140
   401   00085A                     u141:
   402   00085A  EF31  F004         	goto	l1155
   403   00085E                     u140:
   404   00085E  EF35  F004         	goto	l1157
   405   000862                     l1155:
   406                           
   407                           ;servo.c: 249:                    turn_right();
   408   000862  EC01  F003         	call	_turn_right	;wreg free
   409   000866  EF28  F004         	goto	l1151
   410   00086A                     l1157:
   411                           
   412                           ;servo.c: 251:                       _delay((unsigned long)((400)*(250000/4000.0)));
   413   00086A  0E21               	movlw	33
   414   00086C  6E0D               	movwf	??_main^0,c
   415   00086E  0E76               	movlw	118
   416   000870                     u167:
   417   000870  2EE8               	decfsz	wreg,f,c
   418   000872  D7FE               	bra	u167
   419   000874  2E0D               	decfsz	??_main^0,f,c
   420   000876  D7FC               	bra	u167
   421   000878  D000               	nop2	
   422   00087A  EF1E  F004         	goto	l1147
   423   00087E  EF07  F000         	goto	start
   424   000882                     __end_of_main:
   425                           	callstack 0
   426                           
   427 ;; *************** function _turn_right *****************
   428 ;; Defined at:
   429 ;;		line 176 in file "servo.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   443 ;;      Params:         0       0       0       0       0       0       0
   444 ;;      Locals:         0       0       0       0       0       0       0
   445 ;;      Temps:          1       0       0       0       0       0       0
   446 ;;      Totals:         1       0       0       0       0       0       0
   447 ;;Total ram usage:        1 bytes
   448 ;; Hardware stack levels used: 1
   449 ;; Hardware stack levels required when called: 2
   450 ;; This function calls:
   451 ;;		_setServoAngle
   452 ;; This function is called by:
   453 ;;		_main
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text1
   458   000602                     __ptext1:
   459                           	callstack 0
   460   000602                     _turn_right:
   461                           	callstack 28
   462   000602                     
   463                           ;servo.c: 178:         setServoAngle(0, 1005);
   464   000602  0E03               	movlw	3
   465   000604  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   466   000606  0EED               	movlw	237
   467   000608  6E09               	movwf	setServoAngle@pulseWidth^0,c
   468   00060A  0E00               	movlw	0
   469   00060C  ECEF  F003         	call	_setServoAngle
   470                           
   471                           ;servo.c: 179:         setServoAngle(1, 1500);
   472   000610  0E05               	movlw	5
   473   000612  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   474   000614  0EDC               	movlw	220
   475   000616  6E09               	movwf	setServoAngle@pulseWidth^0,c
   476   000618  0E01               	movlw	1
   477   00061A  ECEF  F003         	call	_setServoAngle
   478                           
   479                           ;servo.c: 180:         setServoAngle(2, 1500);
   480   00061E  0E05               	movlw	5
   481   000620  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   482   000622  0EDC               	movlw	220
   483   000624  6E09               	movwf	setServoAngle@pulseWidth^0,c
   484   000626  0E02               	movlw	2
   485   000628  ECEF  F003         	call	_setServoAngle
   486                           
   487                           ;servo.c: 181:         setServoAngle(3, 1005);
   488   00062C  0E03               	movlw	3
   489   00062E  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   490   000630  0EED               	movlw	237
   491   000632  6E09               	movwf	setServoAngle@pulseWidth^0,c
   492   000634  0E03               	movlw	3
   493   000636  ECEF  F003         	call	_setServoAngle
   494   00063A                     
   495                           ;servo.c: 182:         _delay((unsigned long)((250)*(250000/4000.0)));
   496   00063A  0E15               	movlw	21
   497   00063C  6E0C               	movwf	??_turn_right^0,c
   498   00063E  0E49               	movlw	73
   499   000640                     u177:
   500   000640  2EE8               	decfsz	wreg,f,c
   501   000642  D7FE               	bra	u177
   502   000644  2E0C               	decfsz	??_turn_right^0,f,c
   503   000646  D7FC               	bra	u177
   504   000648  D000               	nop2	
   505   00064A                     
   506                           ;servo.c: 184:         setServoAngle(0, 1005);
   507   00064A  0E03               	movlw	3
   508   00064C  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   509   00064E  0EED               	movlw	237
   510   000650  6E09               	movwf	setServoAngle@pulseWidth^0,c
   511   000652  0E00               	movlw	0
   512   000654  ECEF  F003         	call	_setServoAngle
   513   000658                     
   514                           ;servo.c: 185:         setServoAngle(1, 2000);
   515   000658  0E07               	movlw	7
   516   00065A  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   517   00065C  0ED0               	movlw	208
   518   00065E  6E09               	movwf	setServoAngle@pulseWidth^0,c
   519   000660  0E01               	movlw	1
   520   000662  ECEF  F003         	call	_setServoAngle
   521   000666                     
   522                           ;servo.c: 186:         setServoAngle(2, 2000);
   523   000666  0E07               	movlw	7
   524   000668  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   525   00066A  0ED0               	movlw	208
   526   00066C  6E09               	movwf	setServoAngle@pulseWidth^0,c
   527   00066E  0E02               	movlw	2
   528   000670  ECEF  F003         	call	_setServoAngle
   529   000674                     
   530                           ;servo.c: 187:         setServoAngle(3, 1005);
   531   000674  0E03               	movlw	3
   532   000676  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   533   000678  0EED               	movlw	237
   534   00067A  6E09               	movwf	setServoAngle@pulseWidth^0,c
   535   00067C  0E03               	movlw	3
   536   00067E  ECEF  F003         	call	_setServoAngle
   537   000682                     
   538                           ;servo.c: 188:         _delay((unsigned long)((250)*(250000/4000.0)));
   539   000682  0E15               	movlw	21
   540   000684  6E0C               	movwf	??_turn_right^0,c
   541   000686  0E49               	movlw	73
   542   000688                     u187:
   543   000688  2EE8               	decfsz	wreg,f,c
   544   00068A  D7FE               	bra	u187
   545   00068C  2E0C               	decfsz	??_turn_right^0,f,c
   546   00068E  D7FC               	bra	u187
   547   000690  D000               	nop2	
   548                           
   549                           ;servo.c: 190:         setServoAngle(0, 1500);
   550   000692  0E05               	movlw	5
   551   000694  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   552   000696  0EDC               	movlw	220
   553   000698  6E09               	movwf	setServoAngle@pulseWidth^0,c
   554   00069A  0E00               	movlw	0
   555   00069C  ECEF  F003         	call	_setServoAngle
   556                           
   557                           ;servo.c: 191:         setServoAngle(1, 2000);
   558   0006A0  0E07               	movlw	7
   559   0006A2  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   560   0006A4  0ED0               	movlw	208
   561   0006A6  6E09               	movwf	setServoAngle@pulseWidth^0,c
   562   0006A8  0E01               	movlw	1
   563   0006AA  ECEF  F003         	call	_setServoAngle
   564                           
   565                           ;servo.c: 192:         setServoAngle(2, 2000);
   566   0006AE  0E07               	movlw	7
   567   0006B0  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   568   0006B2  0ED0               	movlw	208
   569   0006B4  6E09               	movwf	setServoAngle@pulseWidth^0,c
   570   0006B6  0E02               	movlw	2
   571   0006B8  ECEF  F003         	call	_setServoAngle
   572                           
   573                           ;servo.c: 193:         setServoAngle(3, 1500);
   574   0006BC  0E05               	movlw	5
   575   0006BE  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   576   0006C0  0EDC               	movlw	220
   577   0006C2  6E09               	movwf	setServoAngle@pulseWidth^0,c
   578   0006C4  0E03               	movlw	3
   579   0006C6  ECEF  F003         	call	_setServoAngle
   580   0006CA                     
   581                           ;servo.c: 194:         _delay((unsigned long)((250)*(250000/4000.0)));
   582   0006CA  0E15               	movlw	21
   583   0006CC  6E0C               	movwf	??_turn_right^0,c
   584   0006CE  0E49               	movlw	73
   585   0006D0                     u197:
   586   0006D0  2EE8               	decfsz	wreg,f,c
   587   0006D2  D7FE               	bra	u197
   588   0006D4  2E0C               	decfsz	??_turn_right^0,f,c
   589   0006D6  D7FC               	bra	u197
   590   0006D8  D000               	nop2	
   591   0006DA                     
   592                           ;servo.c: 196:         setServoAngle(0, 1500);
   593   0006DA  0E05               	movlw	5
   594   0006DC  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   595   0006DE  0EDC               	movlw	220
   596   0006E0  6E09               	movwf	setServoAngle@pulseWidth^0,c
   597   0006E2  0E00               	movlw	0
   598   0006E4  ECEF  F003         	call	_setServoAngle
   599   0006E8                     
   600                           ;servo.c: 197:         setServoAngle(1, 1500);
   601   0006E8  0E05               	movlw	5
   602   0006EA  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   603   0006EC  0EDC               	movlw	220
   604   0006EE  6E09               	movwf	setServoAngle@pulseWidth^0,c
   605   0006F0  0E01               	movlw	1
   606   0006F2  ECEF  F003         	call	_setServoAngle
   607   0006F6                     
   608                           ;servo.c: 198:         setServoAngle(2, 1500);
   609   0006F6  0E05               	movlw	5
   610   0006F8  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   611   0006FA  0EDC               	movlw	220
   612   0006FC  6E09               	movwf	setServoAngle@pulseWidth^0,c
   613   0006FE  0E02               	movlw	2
   614   000700  ECEF  F003         	call	_setServoAngle
   615   000704                     
   616                           ;servo.c: 199:         setServoAngle(3, 1500);
   617   000704  0E05               	movlw	5
   618   000706  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   619   000708  0EDC               	movlw	220
   620   00070A  6E09               	movwf	setServoAngle@pulseWidth^0,c
   621   00070C  0E03               	movlw	3
   622   00070E  ECEF  F003         	call	_setServoAngle
   623   000712                     
   624                           ;servo.c: 200:         _delay((unsigned long)((250)*(250000/4000.0)));
   625   000712  0E15               	movlw	21
   626   000714  6E0C               	movwf	??_turn_right^0,c
   627   000716  0E49               	movlw	73
   628   000718                     u207:
   629   000718  2EE8               	decfsz	wreg,f,c
   630   00071A  D7FE               	bra	u207
   631   00071C  2E0C               	decfsz	??_turn_right^0,f,c
   632   00071E  D7FC               	bra	u207
   633   000720  D000               	nop2	
   634   000722  0012               	return		;funcret
   635   000724                     __end_of_turn_right:
   636                           	callstack 0
   637                           
   638 ;; *************** function _setstand *****************
   639 ;; Defined at:
   640 ;;		line 55 in file "servo.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;		None
   643 ;; Auto vars:     Size  Location     Type
   644 ;;		None
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   654 ;;      Params:         0       0       0       0       0       0       0
   655 ;;      Locals:         0       0       0       0       0       0       0
   656 ;;      Temps:          0       0       0       0       0       0       0
   657 ;;      Totals:         0       0       0       0       0       0       0
   658 ;;Total ram usage:        0 bytes
   659 ;; Hardware stack levels used: 1
   660 ;; Hardware stack levels required when called: 2
   661 ;; This function calls:
   662 ;;		_setServoAngle
   663 ;; This function is called by:
   664 ;;		_main
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text2
   669   000882                     __ptext2:
   670                           	callstack 0
   671   000882                     _setstand:
   672                           	callstack 28
   673   000882                     
   674                           ;servo.c: 56:         setServoAngle(0, 1500);
   675   000882  0E05               	movlw	5
   676   000884  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   677   000886  0EDC               	movlw	220
   678   000888  6E09               	movwf	setServoAngle@pulseWidth^0,c
   679   00088A  0E00               	movlw	0
   680   00088C  ECEF  F003         	call	_setServoAngle
   681                           
   682                           ;servo.c: 57:         setServoAngle(1, 1500);
   683   000890  0E05               	movlw	5
   684   000892  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   685   000894  0EDC               	movlw	220
   686   000896  6E09               	movwf	setServoAngle@pulseWidth^0,c
   687   000898  0E01               	movlw	1
   688   00089A  ECEF  F003         	call	_setServoAngle
   689                           
   690                           ;servo.c: 58:         setServoAngle(2, 1500);
   691   00089E  0E05               	movlw	5
   692   0008A0  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   693   0008A2  0EDC               	movlw	220
   694   0008A4  6E09               	movwf	setServoAngle@pulseWidth^0,c
   695   0008A6  0E02               	movlw	2
   696   0008A8  ECEF  F003         	call	_setServoAngle
   697                           
   698                           ;servo.c: 59:         setServoAngle(3, 1500);
   699   0008AC  0E05               	movlw	5
   700   0008AE  6E0A               	movwf	(setServoAngle@pulseWidth+1)^0,c
   701   0008B0  0EDC               	movlw	220
   702   0008B2  6E09               	movwf	setServoAngle@pulseWidth^0,c
   703   0008B4  0E03               	movlw	3
   704   0008B6  ECEF  F003         	call	_setServoAngle
   705   0008BA  0012               	return		;funcret
   706   0008BC                     __end_of_setstand:
   707                           	callstack 0
   708                           
   709 ;; *************** function _setServoAngle *****************
   710 ;; Defined at:
   711 ;;		line 49 in file "servo.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  servo           1    wreg     unsigned char 
   714 ;;  pulseWidth      2    0[COMRAM] unsigned short 
   715 ;; Auto vars:     Size  Location     Type
   716 ;;  servo           1    2[COMRAM] unsigned char 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   726 ;;      Params:         2       0       0       0       0       0       0
   727 ;;      Locals:         1       0       0       0       0       0       0
   728 ;;      Temps:          0       0       0       0       0       0       0
   729 ;;      Totals:         3       0       0       0       0       0       0
   730 ;;Total ram usage:        3 bytes
   731 ;; Hardware stack levels used: 1
   732 ;; Hardware stack levels required when called: 1
   733 ;; This function calls:
   734 ;;		Nothing
   735 ;; This function is called by:
   736 ;;		_setstand
   737 ;;		_turn_right
   738 ;;		_setsit
   739 ;;		_setlaydown
   740 ;;		_walk
   741 ;;		_back_walk
   742 ;;		_turn_left
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           	psect	text3
   747   0007DE                     __ptext3:
   748                           	callstack 0
   749   0007DE                     _setServoAngle:
   750                           	callstack 28
   751                           
   752                           ;incstack = 0
   753                           ;setServoAngle@servo stored from wreg
   754   0007DE  6E0B               	movwf	setServoAngle@servo^0,c
   755   0007E0                     
   756                           ;servo.c: 50:     if (servo < 4 && pulseWidth >= 500 && pulseWidth <= 2500) {
   757   0007E0  0E04               	movlw	4
   758   0007E2  600B               	cpfslt	setServoAngle@servo^0,c
   759   0007E4  EFF6  F003         	goto	u111
   760   0007E8  EFF8  F003         	goto	u110
   761   0007EC                     u111:
   762   0007EC  EF18  F004         	goto	l44
   763   0007F0                     u110:
   764   0007F0  0EF4               	movlw	244
   765   0007F2  5C09               	subwf	setServoAngle@pulseWidth^0,w,c
   766   0007F4  0E01               	movlw	1
   767   0007F6  580A               	subwfb	(setServoAngle@pulseWidth+1)^0,w,c
   768   0007F8  A0D8               	btfss	status,0,c
   769   0007FA  EF01  F004         	goto	u121
   770   0007FE  EF03  F004         	goto	u120
   771   000802                     u121:
   772   000802  EF18  F004         	goto	l44
   773   000806                     u120:
   774   000806  0EC5               	movlw	197
   775   000808  5C09               	subwf	setServoAngle@pulseWidth^0,w,c
   776   00080A  0E09               	movlw	9
   777   00080C  580A               	subwfb	(setServoAngle@pulseWidth+1)^0,w,c
   778   00080E  B0D8               	btfsc	status,0,c
   779   000810  EF0C  F004         	goto	u131
   780   000814  EF0E  F004         	goto	u130
   781   000818                     u131:
   782   000818  EF18  F004         	goto	l44
   783   00081C                     u130:
   784   00081C                     
   785                           ;servo.c: 51:         servoPulse[servo] = pulseWidth;
   786   00081C  500B               	movf	setServoAngle@servo^0,w,c
   787   00081E  0D02               	mullw	2
   788   000820  50F3               	movf	243,w,c
   789   000822  0F01               	addlw	low _servoPulse
   790   000824  6ED9               	movwf	fsr2l,c
   791   000826  6ADA               	clrf	fsr2h,c
   792   000828  C009  FFDE         	movff	setServoAngle@pulseWidth,postinc2
   793   00082C  C00A  FFDD         	movff	setServoAngle@pulseWidth+1,postdec2
   794   000830                     l44:
   795   000830  0012               	return		;funcret
   796   000832                     __end_of_setServoAngle:
   797                           	callstack 0
   798                           
   799 ;; *************** function _Timer0_Init *****************
   800 ;; Defined at:
   801 ;;		line 23 in file "servo.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   815 ;;      Params:         0       0       0       0       0       0       0
   816 ;;      Locals:         0       0       0       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0
   818 ;;      Totals:         0       0       0       0       0       0       0
   819 ;;Total ram usage:        0 bytes
   820 ;; Hardware stack levels used: 1
   821 ;; Hardware stack levels required when called: 1
   822 ;; This function calls:
   823 ;;		Nothing
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text4
   830   0008EA                     __ptext4:
   831                           	callstack 0
   832   0008EA                     _Timer0_Init:
   833                           	callstack 29
   834   0008EA                     
   835                           ;servo.c: 24:     T0CON = 0x88;
   836   0008EA  0E88               	movlw	136
   837   0008EC  6ED5               	movwf	213,c	;volatile
   838   0008EE                     
   839                           ;servo.c: 25:     TMR0H = 0xFF;
   840   0008EE  68D7               	setf	215,c	;volatile
   841                           
   842                           ;servo.c: 26:     TMR0L = 193;
   843   0008F0  0EC1               	movlw	193
   844   0008F2  6ED6               	movwf	214,c	;volatile
   845   0008F4                     
   846                           ;servo.c: 27:     INTCONbits.TMR0IE = 1;
   847   0008F4  8AF2               	bsf	242,5,c	;volatile
   848   0008F6                     
   849                           ;servo.c: 28:     INTCONbits.GIE = 1;
   850   0008F6  8EF2               	bsf	242,7,c	;volatile
   851   0008F8                     
   852                           ;servo.c: 29:     INTCONbits.PEIE = 1;
   853   0008F8  8CF2               	bsf	242,6,c	;volatile
   854   0008FA  0012               	return		;funcret
   855   0008FC                     __end_of_Timer0_Init:
   856                           	callstack 0
   857                           
   858 ;; *************** function _ISR *****************
   859 ;; Defined at:
   860 ;;		line 32 in file "servo.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   874 ;;      Params:         0       0       0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0       0       0
   877 ;;      Totals:         0       0       0       0       0       0       0
   878 ;;Total ram usage:        0 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; This function calls:
   881 ;;		Nothing
   882 ;; This function is called by:
   883 ;;		Interrupt level 2
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	intcode
   888   000008                     __pintcode:
   889                           	callstack 0
   890   000008                     _ISR:
   891                           	callstack 28
   892                           
   893                           ;incstack = 0
   894   000008  8210               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   895   00000A  ED92  F003         	call	int_func,f	;refresh shadow registers
   896                           
   897                           	psect	intcode_body
   898   000724                     __pintcode_body:
   899                           	callstack 28
   900   000724                     int_func:
   901                           	callstack 28
   902   000724  0006               	pop		; remove dummy address from shadow register refresh
   903   000726                     
   904                           ;servo.c: 33:     if (INTCONbits.TMR0IF) {
   905   000726  A4F2               	btfss	242,2,c	;volatile
   906   000728  EF98  F003         	goto	i2u4_41
   907   00072C  EF9A  F003         	goto	i2u4_40
   908   000730                     i2u4_41:
   909   000730  EFED  F003         	goto	i2l40
   910   000734                     i2u4_40:
   911   000734                     
   912                           ;servo.c: 34:         INTCONbits.TMR0IF = 0;
   913   000734  94F2               	bcf	242,2,c	;volatile
   914                           
   915                           ;servo.c: 35:         TMR0H = 0xFF;
   916   000736  68D7               	setf	215,c	;volatile
   917   000738                     
   918                           ;servo.c: 36:         TMR0L = 0x193;
   919   000738  0E93               	movlw	147
   920   00073A  6ED6               	movwf	214,c	;volatile
   921   00073C                     
   922                           ;servo.c: 38:         pwmCounter += 500;
   923   00073C  0EF4               	movlw	244
   924   00073E  260E               	addwf	_pwmCounter^0,f,c	;volatile
   925   000740  0E01               	movlw	1
   926   000742  220F               	addwfc	(_pwmCounter+1)^0,f,c	;volatile
   927   000744                     
   928                           ;servo.c: 40:                     if (pwmCounter <= servoPulse[0]) LATBbits.LATB1 = 1; e
      +                          lse LATBbits.LATB1 = 0;
   929   000744  500E               	movf	_pwmCounter^0,w,c	;volatile
   930   000746  5C01               	subwf	_servoPulse^0,w,c	;volatile
   931   000748  500F               	movf	(_pwmCounter+1)^0,w,c	;volatile
   932   00074A  5802               	subwfb	(_servoPulse+1)^0,w,c	;volatile
   933   00074C  A0D8               	btfss	status,0,c
   934   00074E  EFAB  F003         	goto	i2u5_41
   935   000752  EFAD  F003         	goto	i2u5_40
   936   000756                     i2u5_41:
   937   000756  EFB0  F003         	goto	i2l31
   938   00075A                     i2u5_40:
   939   00075A  828A               	bsf	138,1,c	;volatile
   940   00075C  EFB1  F003         	goto	i2l811
   941   000760                     i2l31:
   942   000760  928A               	bcf	138,1,c	;volatile
   943   000762                     i2l811:
   944                           
   945                           ;servo.c: 41:         if (pwmCounter <= servoPulse[1]) LATBbits.LATB2 = 1; else LATBbits
      +                          .LATB2 = 0;
   946   000762  500E               	movf	_pwmCounter^0,w,c	;volatile
   947   000764  5C03               	subwf	(_servoPulse+2)^0,w,c	;volatile
   948   000766  500F               	movf	(_pwmCounter+1)^0,w,c	;volatile
   949   000768  5804               	subwfb	(_servoPulse+3)^0,w,c	;volatile
   950   00076A  A0D8               	btfss	status,0,c
   951   00076C  EFBA  F003         	goto	i2u6_41
   952   000770  EFBC  F003         	goto	i2u6_40
   953   000774                     i2u6_41:
   954   000774  EFBF  F003         	goto	i2l33
   955   000778                     i2u6_40:
   956   000778  848A               	bsf	138,2,c	;volatile
   957   00077A  EFC0  F003         	goto	i2l815
   958   00077E                     i2l33:
   959   00077E  948A               	bcf	138,2,c	;volatile
   960   000780                     i2l815:
   961                           
   962                           ;servo.c: 42:         if (pwmCounter <= servoPulse[2]) LATBbits.LATB3 = 1; else LATBbits
      +                          .LATB3 = 0;
   963   000780  500E               	movf	_pwmCounter^0,w,c	;volatile
   964   000782  5C05               	subwf	(_servoPulse+4)^0,w,c	;volatile
   965   000784  500F               	movf	(_pwmCounter+1)^0,w,c	;volatile
   966   000786  5806               	subwfb	(_servoPulse+5)^0,w,c	;volatile
   967   000788  A0D8               	btfss	status,0,c
   968   00078A  EFC9  F003         	goto	i2u7_41
   969   00078E  EFCB  F003         	goto	i2u7_40
   970   000792                     i2u7_41:
   971   000792  EFCE  F003         	goto	i2l35
   972   000796                     i2u7_40:
   973   000796  868A               	bsf	138,3,c	;volatile
   974   000798  EFCF  F003         	goto	i2l819
   975   00079C                     i2l35:
   976   00079C  968A               	bcf	138,3,c	;volatile
   977   00079E                     i2l819:
   978                           
   979                           ;servo.c: 43:         if (pwmCounter <= servoPulse[3]) LATBbits.LATB4 = 1; else LATBbits
      +                          .LATB4 = 0;
   980   00079E  500E               	movf	_pwmCounter^0,w,c	;volatile
   981   0007A0  5C07               	subwf	(_servoPulse+6)^0,w,c	;volatile
   982   0007A2  500F               	movf	(_pwmCounter+1)^0,w,c	;volatile
   983   0007A4  5808               	subwfb	(_servoPulse+7)^0,w,c	;volatile
   984   0007A6  A0D8               	btfss	status,0,c
   985   0007A8  EFD8  F003         	goto	i2u8_41
   986   0007AC  EFDA  F003         	goto	i2u8_40
   987   0007B0                     i2u8_41:
   988   0007B0  EFDD  F003         	goto	i2l37
   989   0007B4                     i2u8_40:
   990   0007B4  888A               	bsf	138,4,c	;volatile
   991   0007B6  EFDE  F003         	goto	i2l823
   992   0007BA                     i2l37:
   993   0007BA  988A               	bcf	138,4,c	;volatile
   994   0007BC                     i2l823:
   995                           
   996                           ;servo.c: 45:         if (pwmCounter >= 20000) pwmCounter = 0;
   997   0007BC  0E20               	movlw	32
   998   0007BE  5C0E               	subwf	_pwmCounter^0,w,c	;volatile
   999   0007C0  0E4E               	movlw	78
  1000   0007C2  580F               	subwfb	(_pwmCounter+1)^0,w,c	;volatile
  1001   0007C4  A0D8               	btfss	status,0,c
  1002   0007C6  EFE7  F003         	goto	i2u9_41
  1003   0007CA  EFE9  F003         	goto	i2u9_40
  1004   0007CE                     i2u9_41:
  1005   0007CE  EFED  F003         	goto	i2l40
  1006   0007D2                     i2u9_40:
  1007   0007D2  0E00               	movlw	0
  1008   0007D4  6E0F               	movwf	(_pwmCounter+1)^0,c	;volatile
  1009   0007D6  0E00               	movlw	0
  1010   0007D8  6E0E               	movwf	_pwmCounter^0,c	;volatile
  1011   0007DA                     i2l40:
  1012   0007DA  9210               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1013   0007DC  0011               	retfie		f
  1014   0007DE                     __end_of_ISR:
  1015                           	callstack 0
  1016                           
  1017                           	psect	smallconst
  1018   000600                     __psmallconst:
  1019                           	callstack 0
  1020   000600  00                 	db	0
  1021   000601  00                 	db	0	; dummy byte at the end
  1022   000000                     __activetblptr  equ	0
  1023                           
  1024                           	psect	rparam
  1025   000001                     ___rparam_used  equ	1
  1026   000000                     ___param_bank   equ	0
  1027   000000                     __Lparam        equ	__Lrparam
  1028   000000                     __Hparam        equ	__Hrparam
  1029                           
  1030                           	psect	temp
  1031   000010                     btemp:
  1032                           	callstack 0
  1033   000010                     	ds	1
  1034   000010                     int$flags       set	btemp
  1035   000011                     wtemp8          set	btemp+1
  1036   000011                     ttemp5          set	btemp+1
  1037   000014                     ttemp6          set	btemp+4
  1038   000018                     ttemp7          set	btemp+8
  1039                           
  1040                           	psect	idloc
  1041                           
  1042                           ;Config register IDLOC0 @ 0x200000
  1043                           ;	unspecified, using default values
  1044   200000                     	org	2097152
  1045   200000  FF                 	db	255
  1046                           
  1047                           ;Config register IDLOC1 @ 0x200001
  1048                           ;	unspecified, using default values
  1049   200001                     	org	2097153
  1050   200001  FF                 	db	255
  1051                           
  1052                           ;Config register IDLOC2 @ 0x200002
  1053                           ;	unspecified, using default values
  1054   200002                     	org	2097154
  1055   200002  FF                 	db	255
  1056                           
  1057                           ;Config register IDLOC3 @ 0x200003
  1058                           ;	unspecified, using default values
  1059   200003                     	org	2097155
  1060   200003  FF                 	db	255
  1061                           
  1062                           ;Config register IDLOC4 @ 0x200004
  1063                           ;	unspecified, using default values
  1064   200004                     	org	2097156
  1065   200004  FF                 	db	255
  1066                           
  1067                           ;Config register IDLOC5 @ 0x200005
  1068                           ;	unspecified, using default values
  1069   200005                     	org	2097157
  1070   200005  FF                 	db	255
  1071                           
  1072                           ;Config register IDLOC6 @ 0x200006
  1073                           ;	unspecified, using default values
  1074   200006                     	org	2097158
  1075   200006  FF                 	db	255
  1076                           
  1077                           ;Config register IDLOC7 @ 0x200007
  1078                           ;	unspecified, using default values
  1079   200007                     	org	2097159
  1080   200007  FF                 	db	255
  1081                           
  1082                           	psect	config
  1083                           
  1084                           ; Padding undefined space
  1085   300000                     	org	3145728
  1086   300000  FF                 	db	255
  1087                           
  1088                           ;Config register CONFIG1H @ 0x300001
  1089                           ;	Oscillator Selection bits
  1090                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  1091                           ;	Fail-Safe Clock Monitor Enable bit
  1092                           ;	FCMEN = 0x0, unprogrammed default
  1093                           ;	Internal/External Oscillator Switchover bit
  1094                           ;	IESO = 0x0, unprogrammed default
  1095   300001                     	org	3145729
  1096   300001  08                 	db	8
  1097                           
  1098                           ;Config register CONFIG2L @ 0x300002
  1099                           ;	Power-up Timer Enable bit
  1100                           ;	PWRT = OFF, PWRT disabled
  1101                           ;	Brown-out Reset Enable bits
  1102                           ;	BOREN = ON, Brown-out Reset enabled and controlled by software (SBOREN is enabled)
  1103                           ;	Brown Out Reset Voltage bits
  1104                           ;	BORV = 0x3, unprogrammed default
  1105   300002                     	org	3145730
  1106   300002  1B                 	db	27
  1107                           
  1108                           ;Config register CONFIG2H @ 0x300003
  1109                           ;	Watchdog Timer Enable bit
  1110                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1111                           ;	Watchdog Timer Postscale Select bits
  1112                           ;	WDTPS = 0xF, unprogrammed default
  1113   300003                     	org	3145731
  1114   300003  1E                 	db	30
  1115                           
  1116                           ; Padding undefined space
  1117   300004                     	org	3145732
  1118   300004  FF                 	db	255
  1119                           
  1120                           ;Config register CONFIG3H @ 0x300005
  1121                           ;	CCP2 MUX bit
  1122                           ;	CCP2MX = 0x1, unprogrammed default
  1123                           ;	PORTB A/D Enable bit
  1124                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1125                           ;	Low-Power Timer1 Oscillator Enable bit
  1126                           ;	LPT1OSC = 0x0, unprogrammed default
  1127                           ;	MCLR Pin Enable bit
  1128                           ;	MCLRE = 0x1, unprogrammed default
  1129   300005                     	org	3145733
  1130   300005  81                 	db	129
  1131                           
  1132                           ;Config register CONFIG4L @ 0x300006
  1133                           ;	Stack Full/Underflow Reset Enable bit
  1134                           ;	STVREN = 0x1, unprogrammed default
  1135                           ;	Single-Supply ICSP Enable bit
  1136                           ;	LVP = OFF, Single-Supply ICSP disabled
  1137                           ;	Extended Instruction Set Enable bit
  1138                           ;	XINST = 0x0, unprogrammed default
  1139                           ;	Background Debugger Enable bit
  1140                           ;	DEBUG = 0x1, unprogrammed default
  1141   300006                     	org	3145734
  1142   300006  81                 	db	129
  1143                           
  1144                           ; Padding undefined space
  1145   300007                     	org	3145735
  1146   300007  FF                 	db	255
  1147                           
  1148                           ;Config register CONFIG5L @ 0x300008
  1149                           ;	unspecified, using default values
  1150                           ;	Code Protection bit
  1151                           ;	CP0 = 0x1, unprogrammed default
  1152                           ;	Code Protection bit
  1153                           ;	CP1 = 0x1, unprogrammed default
  1154                           ;	Code Protection bit
  1155                           ;	CP2 = 0x1, unprogrammed default
  1156                           ;	Code Protection bit
  1157                           ;	CP3 = 0x1, unprogrammed default
  1158   300008                     	org	3145736
  1159   300008  0F                 	db	15
  1160                           
  1161                           ;Config register CONFIG5H @ 0x300009
  1162                           ;	Boot Block Code Protection bit
  1163                           ;	CPB = 0x1, unprogrammed default
  1164                           ;	Data EEPROM Code Protection bit
  1165                           ;	CPD = OFF, Data EEPROM not code-protected
  1166   300009                     	org	3145737
  1167   300009  C0                 	db	192
  1168                           
  1169                           ;Config register CONFIG6L @ 0x30000A
  1170                           ;	unspecified, using default values
  1171                           ;	Write Protection bit
  1172                           ;	WRT0 = 0x1, unprogrammed default
  1173                           ;	Write Protection bit
  1174                           ;	WRT1 = 0x1, unprogrammed default
  1175                           ;	Write Protection bit
  1176                           ;	WRT2 = 0x1, unprogrammed default
  1177                           ;	Write Protection bit
  1178                           ;	WRT3 = 0x1, unprogrammed default
  1179   30000A                     	org	3145738
  1180   30000A  0F                 	db	15
  1181                           
  1182                           ;Config register CONFIG6H @ 0x30000B
  1183                           ;	unspecified, using default values
  1184                           ;	Configuration Register Write Protection bit
  1185                           ;	WRTC = 0x1, unprogrammed default
  1186                           ;	Boot Block Write Protection bit
  1187                           ;	WRTB = 0x1, unprogrammed default
  1188                           ;	Data EEPROM Write Protection bit
  1189                           ;	WRTD = 0x1, unprogrammed default
  1190   30000B                     	org	3145739
  1191   30000B  E0                 	db	224
  1192                           
  1193                           ;Config register CONFIG7L @ 0x30000C
  1194                           ;	unspecified, using default values
  1195                           ;	Table Read Protection bit
  1196                           ;	EBTR0 = 0x1, unprogrammed default
  1197                           ;	Table Read Protection bit
  1198                           ;	EBTR1 = 0x1, unprogrammed default
  1199                           ;	Table Read Protection bit
  1200                           ;	EBTR2 = 0x1, unprogrammed default
  1201                           ;	Table Read Protection bit
  1202                           ;	EBTR3 = 0x1, unprogrammed default
  1203   30000C                     	org	3145740
  1204   30000C  0F                 	db	15
  1205                           
  1206                           ;Config register CONFIG7H @ 0x30000D
  1207                           ;	unspecified, using default values
  1208                           ;	Boot Block Table Read Protection bit
  1209                           ;	EBTRB = 0x1, unprogrammed default
  1210   30000D                     	org	3145741
  1211   30000D  40                 	db	64
  1212                           tosu	equ	0xFFF
  1213                           tosh	equ	0xFFE
  1214                           tosl	equ	0xFFD
  1215                           stkptr	equ	0xFFC
  1216                           pclatu	equ	0xFFB
  1217                           pclath	equ	0xFFA
  1218                           pcl	equ	0xFF9
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           prodh	equ	0xFF4
  1224                           prodl	equ	0xFF3
  1225                           indf0	equ	0xFEF
  1226                           postinc0	equ	0xFEE
  1227                           postdec0	equ	0xFED
  1228                           preinc0	equ	0xFEC
  1229                           plusw0	equ	0xFEB
  1230                           fsr0h	equ	0xFEA
  1231                           fsr0l	equ	0xFE9
  1232                           wreg	equ	0xFE8
  1233                           indf1	equ	0xFE7
  1234                           postinc1	equ	0xFE6
  1235                           postdec1	equ	0xFE5
  1236                           preinc1	equ	0xFE4
  1237                           plusw1	equ	0xFE3
  1238                           fsr1h	equ	0xFE2
  1239                           fsr1l	equ	0xFE1
  1240                           bsr	equ	0xFE0
  1241                           indf2	equ	0xFDF
  1242                           postinc2	equ	0xFDE
  1243                           postdec2	equ	0xFDD
  1244                           preinc2	equ	0xFDC
  1245                           plusw2	equ	0xFDB
  1246                           fsr2h	equ	0xFDA
  1247                           fsr2l	equ	0xFD9
  1248                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126      5      15
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_turn_right
    _turn_right->_setServoAngle
    _setstand->_setServoAngle

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     464
                                              4 COMRAM     1     1      0
                        _Timer0_Init
                           _setstand
                         _turn_right
 ---------------------------------------------------------------------------------
 (1) _turn_right                                           1     1      0     232
                                              3 COMRAM     1     1      0
                      _setServoAngle
 ---------------------------------------------------------------------------------
 (1) _setstand                                             0     0      0     232
                      _setServoAngle
 ---------------------------------------------------------------------------------
 (2) _setServoAngle                                        3     1      2     232
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_Init
   _setstand
     _setServoAngle
   _turn_right
     _setServoAngle

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM          126      0       0      0.0%
COMRAM             126      5      15     11.9%
BITBIGSFRl           1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      15      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 09 21:01:08 2024

                     l25 08FA                       l44 0830                       l62 0722  
                     l47 08BA                      l761 08EA                      l763 08EE  
                    l765 08F4                      l767 08F6                      l769 08F8  
                    l981 081C                      l975 07E0                      l983 0882  
                    l991 0658                      l977 07F0                      l993 0666  
                    l985 0602                      l979 0806                      l995 0674  
                    l987 063A                      l997 0682                      l989 064A  
                    l999 06CA                      _RB0 7C08                      u110 07F0  
                    u111 07EC                      u120 0806                      u121 0802  
                    u130 081C                      u131 0818                      u140 085E  
                    u141 085A                      u207 0718                      u157 0846  
                    u167 0870                      u177 0640                      u187 0688  
                    _ISR 0008                      u197 06D0                      wreg 0FE8  
                   ?_ISR 0009                     l1001 06DA                     l1003 06E8  
                   l1005 06F6                     l1007 0704                     l1009 0712  
                   l1141 0832                     l1151 0850                     l1143 0836  
                   l1145 0838                     l1155 0862                     l1147 083C  
                   l1157 086A                     l1149 0840                     _LATB 0F8A  
                   i2l31 0760                     i2l40 07DA                     i2l33 077E  
                   i2l35 079C                     i2l37 07BA                     _main 0832  
                   fsr2h 0FDA                     fsr1l 0FE1                     fsr2l 0FD9  
                   btemp 0010                     prodl 0FF3                     start 000E  
           ___param_bank 0000                    ??_ISR 0009                    ?_main 0009  
                  _T0CON 0FD5                    i2l801 0734                    i2l811 0762  
                  i2l803 0738                    i2l821 07B4                    i2l813 0778  
                  i2l805 073C                    i2l823 07BC                    i2l815 0780  
                  i2l807 0744                    i2l825 07D2                    i2l817 0796  
                  i2l809 075A                    i2l819 079E                    i2l799 0726  
                  _TMR0H 0FD7                    _TMR0L 0FD6                    _TRISB 0F93  
                  tablat 0FF5                    ttemp5 0011                    ttemp6 0014  
                  ttemp7 0018                    status 0FD8                    wtemp8 0011  
setServoAngle@pulseWidth 0009          __initialization 08BC             __end_of_main 0882  
                 ??_main 000D            __activetblptr 0000    __end_of_setServoAngle 0832  
                 i2u4_40 0734                   i2u4_41 0730                   i2u5_40 075A  
                 i2u5_41 0756                   i2u6_40 0778                   i2u6_41 0774  
                 i2u7_40 0796                   i2u7_41 0792                   i2u8_40 07B4  
                 i2u8_41 07B0                   i2u9_40 07D2                   i2u9_41 07CE  
          ??_Timer0_Init 0009                   isa$std 0001             __pdataCOMRAM 0001  
           __mediumconst 0000                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8         __end_of_setstand 08BC               __accesstop 0080  
__end_of__initialization 08E0       setServoAngle@servo 000B            ___rparam_used 0001  
         __pcstackCOMRAM 0009      __end_of_Timer0_Init 08FC                  __Hparam 0000  
            _Timer0_Init 08EA                  __Lparam 0000                ?_setstand 0009  
           __psmallconst 0600                  __pcinit 08BC                  __ramtop 0600  
                __ptext0 0832                  __ptext1 0602                  __ptext2 0882  
                __ptext3 07DE                  __ptext4 08EA           __pintcode_body 0724  
   end_of_initialization 08E0                  int_func 0724                  postdec1 0FE5  
                postdec2 0FDD               ??_setstand 000C                  postinc0 0FEE  
                postinc2 0FDE               _pwmCounter 000E               _servoPulse 0001  
          __pidataCOMRAM 08FC               _turn_right 0602      start_initialization 08BC  
            __end_of_ISR 07DE              __pbssCOMRAM 000E            _setServoAngle 07DE  
           ?_Timer0_Init 0009                __pintcode 0008              ?_turn_right 0009  
            __smallconst 0600           ?_setServoAngle 0009                 _LATBbits 0F8A  
              copy_data0 08D0                 __Hrparam 0000                 __Lrparam 0000  
        ??_setServoAngle 000B                 isa$xinst 0000                 _setstand 0882  
               int$flags 0010               _INTCONbits 0FF2                 intlevel2 0000  
           ??_turn_right 000C       __end_of_turn_right 0724  
